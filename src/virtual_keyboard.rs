//! # D-Bus interface proxy for: `org.kde.kwin.VirtualKeyboard`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/VirtualKeyboard' from service 'org.kde.KWin' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.kde.kwin.VirtualKeyboard",
    default_service = "org.kde.KWin",
    default_path = "/VirtualKeyboard"
)]
pub trait VirtualKeyboard {
    /// forceActivate method
    #[zbus(name = "forceActivate")]
    fn force_activate(&self) -> zbus::Result<()>;

    /// willShowOnActive method
    #[zbus(name = "willShowOnActive")]
    fn will_show_on_active(&self) -> zbus::Result<bool>;

    /// activeChanged signal
    #[zbus(signal, name = "activeChanged")]
    fn active_changed(&self) -> zbus::Result<()>;

    /// activeClientSupportsTextInputChanged signal
    #[zbus(signal, name = "activeClientSupportsTextInputChanged")]
    fn active_client_supports_text_input_changed(&self) -> zbus::Result<()>;

    /// availableChanged signal
    #[zbus(signal, name = "availableChanged")]
    fn available_changed(&self) -> zbus::Result<()>;

    /// enabledChanged signal
    #[zbus(signal, name = "enabledChanged")]
    fn enabled_changed(&self) -> zbus::Result<()>;

    /// visibleChanged signal
    #[zbus(signal, name = "visibleChanged")]
    fn visible_changed(&self) -> zbus::Result<()>;

    /// active property
    #[zbus(property, name = "active")]
    fn active(&self) -> zbus::Result<bool>;
    #[zbus(property, name = "active")]
    fn set_active(&self, value: bool) -> zbus::Result<()>;

    /// activeClientSupportsTextInput property
    #[zbus(property, name = "activeClientSupportsTextInput")]
    fn active_client_supports_text_input(&self) -> zbus::Result<bool>;

    /// available property
    #[zbus(property, name = "available")]
    fn available(&self) -> zbus::Result<bool>;

    /// enabled property
    #[zbus(property, name = "enabled")]
    fn enabled(&self) -> zbus::Result<bool>;
    #[zbus(property, name = "enabled")]
    fn set_enabled(&self, value: bool) -> zbus::Result<()>;

    /// visible property
    #[zbus(property, name = "visible")]
    fn visible(&self) -> zbus::Result<bool>;
}
